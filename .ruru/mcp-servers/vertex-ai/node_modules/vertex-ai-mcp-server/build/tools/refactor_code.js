import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const refactorCodeTool = {
    name: "refactor_code",
    description: `Refactors a given code snippet to achieve a specific goal (e.g., improve readability, performance) while adhering to optional constraints. May use function calling (search_codebase) to understand usage. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code', 'language', and 'goal'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet to refactor." }, language: { type: "string", description: "The programming language of the code snippet." }, goal: { type: "string", description: "The primary objective of the refactoring (e.g., 'Improve readability', 'Extract method')." }, constraints: { type: "array", items: { type: "string" }, description: "Optional array of constraints the refactored code must follow." } }, required: ["code", "language", "goal"] },
    buildPrompt: (args, modelId) => {
        const { code, language, goal, constraints } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language || typeof goal !== "string" || !goal)
            throw new McpError(ErrorCode.InvalidParams, "Missing required arguments.");
        const constrStr = Array.isArray(constraints) && constraints.length > 0 ? ` Constraints: ${JSON.stringify(constraints)}.` : '';
        return {
            systemInstructionText: `You are an expert code refactoring assistant. Refactor the ${language} code to achieve: "${goal}". Adhere to constraints.${constrStr} Output refactored code block first, then Markdown explanation.`,
            userQueryText: `Original Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: true // Allow searching usages
        };
    }
};
