import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const generateCodeTool = {
    name: "generate_code",
    description: `Generates code in a specified language based on a description. Can optionally use requirements, existing code context, and function calling (read_file_content) to access workspace files for more context. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'description' and 'language'.`,
    inputSchema: { type: "object", properties: { description: { type: "string", description: "Detailed natural language description of the code to generate." }, language: { type: "string", description: "The target programming language (e.g., 'python', 'typescript')." }, requirements: { type: "array", items: { type: "string" }, description: "Optional array of specific requirements or constraints." }, existingCodeContext: { type: "string", description: "Optional string containing existing code to provide context." } }, required: ["description", "language"] },
    buildPrompt: (args, modelId) => {
        const { description, language, requirements, existingCodeContext } = args;
        if (typeof description !== "string" || !description || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'description' or 'language'.");
        const reqStr = Array.isArray(requirements) && requirements.length > 0 ? ` Requirements: ${JSON.stringify(requirements)}.` : '';
        const contextStr = typeof existingCodeContext === 'string' && existingCodeContext ? ` Existing Context:\n\`\`\`${language}\n${existingCodeContext}\n\`\`\`` : '';
        return {
            systemInstructionText: `You are an expert code generation assistant. Generate clean, efficient, correct code in ${language} based *only* on the description/requirements. If context is provided, integrate well. Output *only* the raw code block, no explanations unless asked.`,
            userQueryText: `Description: ${description}.${reqStr}${contextStr}`,
            useWebSearch: false,
            enableFunctionCalling: true // Allow reading files
        };
    }
};
