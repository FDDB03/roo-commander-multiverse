import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const applyDesignPatternTool = {
    name: "apply_design_pattern",
    description: `Refactors a code snippet to implement a specified software design pattern based on a description. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code', 'language', 'pattern', and 'description'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet to refactor." }, language: { type: "string", description: "The programming language of the code snippet." }, pattern: { type: "string", description: "The name of the design pattern to apply (e.g., 'Singleton', 'Factory Method')." }, description: { type: "string", description: "Explanation of how the pattern should be applied to this specific code." } }, required: ["code", "language", "pattern", "description"] },
    buildPrompt: (args, modelId) => {
        const { code, language, pattern, description } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language || typeof pattern !== "string" || !pattern || typeof description !== "string" || !description)
            throw new McpError(ErrorCode.InvalidParams, "Missing required arguments.");
        return {
            systemInstructionText: `You are an expert code refactoring assistant. Refactor the ${language} code to implement the ${pattern} design pattern based on: "${description}". Output refactored code block first, then Markdown explanation.`,
            userQueryText: `Original Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: false // Function calling might be useful here, but keeping it simple for now
        };
    }
};
