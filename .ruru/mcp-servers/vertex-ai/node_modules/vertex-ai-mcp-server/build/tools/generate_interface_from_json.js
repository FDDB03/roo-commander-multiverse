import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const generateInterfaceFromJsonTool = {
    name: "generate_interface_from_json",
    description: `Generates a type definition (TypeScript interface, Python dataclass/TypedDict, Java class) from a JSON data example. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'jsonData' and 'language'.`,
    inputSchema: { type: "object", properties: { jsonData: { type: "string", description: "A string containing the example JSON data." }, language: { type: "string", enum: ["typescript", "python", "java"], description: "The target language for the type definition ('typescript', 'python', 'java')." } }, required: ["jsonData", "language"] },
    buildPrompt: (args, modelId) => {
        const { jsonData, language } = args;
        if (typeof jsonData !== "string" || !jsonData || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'jsonData' or 'language'.");
        return {
            systemInstructionText: `You are a type definition expert. Generate an accurate type definition (interface/class/type) in ${language} matching the structure of the provided JSON data. Output *only* the raw code block.`,
            userQueryText: `JSON Data:\n\`\`\`json\n${jsonData}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: false
        };
    }
};
