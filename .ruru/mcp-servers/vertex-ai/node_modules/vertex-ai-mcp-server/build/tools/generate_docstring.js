import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const generateDocstringTool = {
    name: "generate_docstring",
    description: `Generates documentation comments (docstrings) for functions, classes, or modules in a specified style (e.g., JSDoc, Google Python). Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code' and 'language'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet (function, class, etc.) needing documentation." }, language: { type: "string", description: "The programming language." }, style: { type: "string", enum: ["jsdoc", "tsdoc", "google", "numpy", "default"], description: "Optional documentation style ('jsdoc', 'tsdoc', 'google', 'numpy', 'default')." } }, required: ["code", "language"] },
    buildPrompt: (args, modelId) => {
        const { code, language, style } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'code' or 'language'.");
        const styleStr = style ? `${style}` : 'default';
        return {
            systemInstructionText: `You are a documentation expert. Generate detailed doc comments for the ${language} code in ${styleStr} format. Output *only* the raw code including the generated docstrings.`,
            userQueryText: `Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: false
        };
    }
};
