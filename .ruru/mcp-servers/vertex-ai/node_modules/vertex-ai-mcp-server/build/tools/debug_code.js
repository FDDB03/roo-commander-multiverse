import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const debugCodeTool = {
    name: "debug_code",
    description: `Analyzes a code snippet, error message, or description to identify bugs and suggest fixes. May use function calling (read_file_content, search_codebase) for context. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code', 'language', and either 'error' or 'description'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet suspected of containing a bug." }, language: { type: "string", description: "The programming language of the code snippet." }, error: { type: "string", description: "Optional error message associated with the bug." }, description: { type: "string", description: "Optional natural language description of the bug or unexpected behavior." } }, required: ["code", "language"] },
    buildPrompt: (args, modelId) => {
        const { code, language, error, description } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language || (!error && !description))
            throw new McpError(ErrorCode.InvalidParams, "Missing required arguments.");
        const errorContext = error ? ` Error: ${error}` : ` Description: ${description}`;
        return {
            systemInstructionText: `You are an expert debugging assistant. Analyze the ${language} code and context to find the bug. Suggest fixes/steps. Format as Markdown, include corrected snippets.`,
            userQueryText: `Code:\n\`\`\`${language}\n${code}\n\`\`\`\n${errorContext}`,
            useWebSearch: false,
            enableFunctionCalling: true // Allow reading files, searching
        };
    }
};
