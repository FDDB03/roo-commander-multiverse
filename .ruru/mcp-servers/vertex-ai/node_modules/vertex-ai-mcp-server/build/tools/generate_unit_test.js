import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const generateUnitTestTool = {
    name: "generate_unit_test",
    description: `Generates unit tests for a given code snippet in a specified language. Can optionally target a specific framework and focus testing efforts. May use function calling (read_file_content) for context. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code' and 'language'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet to generate unit tests for." }, language: { type: "string", description: "The programming language of the code snippet." }, framework: { type: "string", description: "Optional testing framework to use (e.g., 'pytest', 'jest'). Defaults to standard library tests." }, focus: { type: "string", description: "Optional description of areas or cases to focus testing on (e.g., 'edge cases', 'error handling')." } }, required: ["code", "language"] },
    buildPrompt: (args, modelId) => {
        const { code, language, framework, focus } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'code' or 'language'.");
        const frameworkStr = framework ? `${framework}` : 'standard library';
        const focusStr = focus ? `${focus}` : 'common cases and edge cases';
        return {
            systemInstructionText: `You are an expert unit testing assistant. Generate comprehensive unit tests for the provided ${language} code using ${frameworkStr}. Focus on ${focusStr}. Output *only* the raw test code block.`,
            userQueryText: `Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: true // Allow reading related files
        };
    }
};
