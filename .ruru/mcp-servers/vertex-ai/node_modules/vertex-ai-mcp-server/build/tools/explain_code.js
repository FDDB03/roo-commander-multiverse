import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const explainCodeTool = {
    name: "explain_code",
    description: `Explains a given code snippet in a specified language, detailing its purpose, logic, and potential complexities. Can optionally adjust detail level. May use function calling (read_file_content) for context. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code' and 'language'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet to explain." }, language: { type: "string", description: "The programming language of the code snippet." }, detailLevel: { type: "string", enum: ["high", "low"], description: "Optional detail level ('high' or 'low'). Defaults to 'high'." } }, required: ["code", "language"] },
    buildPrompt: (args, modelId) => {
        const { code, language, detailLevel } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'code' or 'language'.");
        const level = (detailLevel === 'low') ? 'low' : 'high';
        return {
            systemInstructionText: `You are an expert code analysis assistant. Explain the provided ${language} code snippet clearly and concisely (detail: ${level}). Explain purpose, logic, I/O, complexities. Format as Markdown.`,
            userQueryText: `Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: true // Allow reading related files
        };
    }
};
