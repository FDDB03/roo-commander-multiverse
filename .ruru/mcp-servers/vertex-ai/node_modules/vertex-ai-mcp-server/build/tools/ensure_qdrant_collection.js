import { z } from 'zod';
import { getQdrantClient, isQdrantConfigured } from '../qdrant_client.js';
import { DEFAULT_VECTOR_SIZE, DEFAULT_DISTANCE_METRIC } from '../config.js';
import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
// Input Schema
export const EnsureQdrantCollectionInputSchema = z.object({
    collection_name: z.string().min(1).describe("The name of the Qdrant collection to ensure exists."),
    vector_size: z.number().int().positive().optional().default(DEFAULT_VECTOR_SIZE).describe(`The dimensionality of the vectors to be stored. Defaults to ${DEFAULT_VECTOR_SIZE}.`),
    distance_metric: z.enum(['Cosine', 'Euclid', 'Dot']).optional().default(DEFAULT_DISTANCE_METRIC).describe(`The distance metric for vector comparison. Defaults to '${DEFAULT_DISTANCE_METRIC}'.`),
}).describe("Input for ensuring a Qdrant collection exists, creating it if necessary.");
// Output Schema (Simple success message)
const EnsureQdrantCollectionOutputSchema = z.object({
    message: z.string().describe("A message indicating the result (collection found or created)."),
}).describe("Output confirming the collection status.");
// Tool Implementation
async function ensureQdrantCollectionHandler(input) {
    if (!isQdrantConfigured()) {
        throw new McpError(ErrorCode.InternalError, "Qdrant client is not configured. Set QDRANT_URL environment variable.");
    }
    const client = getQdrantClient();
    const { collection_name, vector_size, distance_metric } = input;
    try {
        // Check if collection exists
        const collectionsResponse = await client.getCollections();
        const collectionExists = collectionsResponse.collections.some(c => c.name === collection_name);
        if (collectionExists) {
            // Optional: Could add a check here to verify existing collection parameters match input
            return { message: `Collection '${collection_name}' already exists.` };
        }
        else {
            // Create collection
            console.log(`Creating Qdrant collection '${collection_name}' with size ${vector_size} and distance ${distance_metric}...`);
            await client.createCollection(collection_name, {
                vectors: {
                    size: vector_size,
                    distance: distance_metric,
                },
                // Add other parameters like optimizers_config, hnsw_config if needed later
            });
            return { message: `Collection '${collection_name}' created successfully.` };
        }
    }
    catch (error) {
        console.error(`Error ensuring Qdrant collection '${collection_name}':`, error);
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        // Throw a specific MCP error
        throw new McpError(ErrorCode.InternalError, `Failed to ensure Qdrant collection '${collection_name}': ${errorMessage}`);
    }
}
// Export the handler function for use in index.ts
export { ensureQdrantCollectionHandler };
// Note: We don't export a ToolDefinition here as this is a direct-call tool like filesystem tools.
// We'll integrate it directly in index.ts.
