import { z } from 'zod';
import { getQdrantClient, isQdrantConfigured } from '../qdrant_client.js';
import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
// Removed PointStruct import as it's not directly exported
// Define Zod schema for a single point, matching the expected structure
const PointStructSchema = z.object({
    id: z.union([z.string().uuid(), z.number().int()]).describe("Unique ID for the point (UUID string or 64-bit integer)."),
    vector: z.array(z.number()).describe("The vector embedding for the point."),
    payload: z.record(z.any()).optional().describe("Optional JSON payload containing metadata."),
}).describe("Structure for a single point to be upserted.");
// Input Schema
export const UpsertQdrantPointsInputSchema = z.object({
    collection_name: z.string().min(1).describe("The name of the Qdrant collection to upsert into."),
    points: z.array(PointStructSchema).min(1).describe("An array of points to upsert."),
    wait: z.boolean().optional().default(false).describe("If true, wait for the operation to be indexed before returning."),
}).describe("Input for upserting points into a Qdrant collection.");
// Output Schema (Simple success message)
const UpsertQdrantPointsOutputSchema = z.object({
    operation_id: z.number().int().describe("ID of the upsert operation."),
    status: z.string().describe("Status of the operation (e.g., 'acknowledged', 'completed')."),
}).describe("Output confirming the result of the upsert operation.");
// Tool Implementation
async function upsertQdrantPointsHandler(input) {
    if (!isQdrantConfigured()) {
        throw new McpError(ErrorCode.InternalError, "Qdrant client is not configured. Set QDRANT_URL environment variable.");
    }
    const client = getQdrantClient();
    const { collection_name, points, wait } = input;
    // The input 'points' array validated by Zod should match the expected structure for the client method
    const pointsToUpsert = points; // Type will be inferred or checked by client.upsert
    try {
        console.log(`Upserting ${pointsToUpsert.length} points into Qdrant collection '${collection_name}'...`);
        const result = await client.upsert(collection_name, {
            wait: wait,
            points: pointsToUpsert,
        });
        console.log('Qdrant upsert result:', result);
        // Status check for 'error' removed, as errors are expected to be thrown and caught
        if (result.status === 'completed' || result.status === 'acknowledged') {
            return {
                // Handle potentially null/undefined operation_id
                operation_id: result.operation_id ?? -1,
                status: result.status,
            };
        }
        else {
            // Handle unexpected status
            console.warn("Unexpected Qdrant upsert status:", result.status);
            throw new Error(`Unexpected Qdrant upsert status: ${result.status}`);
        }
    }
    catch (error) {
        console.error(`Error upserting points to Qdrant collection '${collection_name}':`, error);
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        throw new McpError(ErrorCode.InternalError, `Failed to upsert points to Qdrant collection '${collection_name}': ${errorMessage}`);
    }
}
// Export the handler function for use in index.ts
export { upsertQdrantPointsHandler };
// Note: No ToolDefinition exported. Integration via index.ts.
