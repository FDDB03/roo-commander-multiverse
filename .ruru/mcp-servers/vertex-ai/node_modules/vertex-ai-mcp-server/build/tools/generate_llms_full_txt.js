import { z } from 'zod';
import { McpError, ErrorCode } from '@modelcontextprotocol/sdk/types.js'; // Needed for validation errors
import { zodToJsonSchema } from 'zod-to-json-schema'; // Import the converter
// Define the input schema for the generate_llms_full_txt tool based on the plan
export const GenerateLlmsFullTxtArgsSchema = z.object({
    url: z.string().url({ message: 'Invalid URL format provided.' }),
    output_path: z
        .string()
        .optional()
        .default('llms-full.txt')
        .describe('The relative path within the workspace where the output file should be saved.'),
    max_crawl_depth: z
        .number()
        .int()
        .positive()
        .optional()
        .default(3)
        .describe('Maximum depth to crawl website links.'),
    include_patterns_web: z
        .array(z.string())
        .optional()
        .default(['/docs/**', '/guide/**', '/api/**'])
        .describe('Glob patterns for website URL paths to include.'),
    exclude_patterns_web: z
        .array(z.string())
        .optional()
        .default(['/blog/**', '/support/**'])
        .describe('Glob patterns for website URL paths to exclude.'),
    content_selector_web: z
        .string()
        .optional()
        .describe('CSS selector for the main content area. Overrides automatic detection (node-readability).'),
    include_patterns_git: z
        .array(z.string())
        .optional()
        .default([
        '**/docs/**/*.md',
        '**/README.md',
        '**/docs/**/*.rst',
        '**/docs/**/*.asciidoc',
    ])
        .describe('Glob patterns for file paths within the Git repository to include.'),
    exclude_patterns_git: z
        .array(z.string())
        .optional()
        .default(['**/node_modules/**', '**/.git/**'])
        .describe('Glob patterns for file paths within the Git repository to exclude.'),
    concurrency: z
        .number()
        .int()
        .positive()
        .optional()
        .default(5)
        .describe('Maximum number of parallel operations (e.g., Playwright pages, file processing).'),
    wait_until_web: z
        .enum(['load', 'domcontentloaded', 'networkidle', 'commit'])
        .optional()
        .default('networkidle')
        .describe('Playwright navigation waiting strategy.'),
    extra_wait_ms_web: z
        .number()
        .int()
        .nonnegative()
        .optional()
        .default(0)
        .describe('Additional milliseconds to wait after the `waitUntil` condition is met.'),
});
// Define the tool using ToolDefinition
export const generateLlmsFullTxtTool = {
    name: 'generate_llms_full_txt',
    description: 'Crawls a website URL or clones a Git repository URL, extracts documentation content, converts it to Markdown, and aggregates it into a single output file (llms-full.txt).',
    inputSchema: zodToJsonSchema(GenerateLlmsFullTxtArgsSchema), // Use zodToJsonSchema
    // Add minimal buildPrompt for argument validation, similar to other tools
    buildPrompt: (args) => {
        const parsed = GenerateLlmsFullTxtArgsSchema.safeParse(args);
        if (!parsed.success) {
            // Combine Zod error messages into a single string
            const errorMessages = parsed.error.errors.map((e) => `${e.path.join('.')}: ${e.message}`).join('; ');
            throw new McpError(ErrorCode.InvalidParams, `Invalid arguments for generate_llms_full_txt: ${errorMessages}`);
        }
        // This tool performs actions directly, no specific prompt generation needed for the LLM itself.
        // Return empty/neutral values to satisfy the type.
        return {
            systemInstructionText: "",
            userQueryText: "",
            useWebSearch: false,
            enableFunctionCalling: false // Assuming the handler triggers the logic, not an LLM function call
        };
    },
};
// Removed the incorrect JSON export
