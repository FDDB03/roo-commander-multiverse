import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const generateBoilerplateTool = {
    name: "generate_boilerplate",
    description: `Generates standard boilerplate code for a specified template name and language (e.g., a React component, a Python class). Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'templateName' and 'language'.`,
    inputSchema: { type: "object", properties: { templateName: { type: "string", description: "The type of boilerplate to generate (e.g., 'React functional component', 'Python Flask route')." }, language: { type: "string", description: "The target programming language." }, options: { type: "object", description: "Optional object for specific boilerplate options." } }, required: ["templateName", "language"] },
    buildPrompt: (args, modelId) => {
        const { templateName, language, options } = args;
        if (typeof templateName !== "string" || !templateName || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'templateName' or 'language'.");
        const optionsStr = options ? ` Options: ${JSON.stringify(options)}` : '';
        return {
            systemInstructionText: `You are a boilerplate generation assistant. Generate standard boilerplate code for a ${templateName} in ${language}${optionsStr}. Output *only* the raw code block.`,
            userQueryText: `Generate boilerplate for ${templateName}.`, // Simple trigger
            useWebSearch: false,
            enableFunctionCalling: false
        };
    }
};
