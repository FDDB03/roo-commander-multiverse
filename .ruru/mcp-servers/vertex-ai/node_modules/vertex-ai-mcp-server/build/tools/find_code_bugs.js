import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const findCodeBugsTool = {
    name: "find_code_bugs",
    description: `Reviews a code snippet to proactively identify potential bugs, anti-patterns, or logical errors. May use function calling (read_file_content) for context. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code' and 'language'.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet to analyze for potential bugs." }, language: { type: "string", description: "The programming language of the code snippet." } }, required: ["code", "language"] },
    buildPrompt: (args, modelId) => {
        const { code, language } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'code' or 'language'.");
        return {
            systemInstructionText: `You are a code analysis expert. Identify potential bugs and anti-patterns in the ${language} code. Explain findings in Markdown.`,
            userQueryText: `Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: true // Allow reading context
        };
    }
};
