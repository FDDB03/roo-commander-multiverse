import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
export const checkSecurityVulnerabilitiesTool = {
    name: "check_security_vulnerabilities",
    description: `Performs an experimental check for common security vulnerabilities (like OWASP Top 10 related issues) in a code snippet. May use function calling (read_file_content) for context. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'code' and 'language'. Disclaimer: Not a substitute for security audits.`,
    inputSchema: { type: "object", properties: { code: { type: "string", description: "The code snippet to check for vulnerabilities." }, language: { type: "string", description: "The programming language of the code snippet." }, context: { type: "string", description: "Optional description of the context in which the code runs." } }, required: ["code", "language"] },
    buildPrompt: (args, modelId) => {
        const { code, language, context } = args;
        if (typeof code !== "string" || !code || typeof language !== "string" || !language)
            throw new McpError(ErrorCode.InvalidParams, "Missing 'code' or 'language'.");
        const contextStr = context ? ` Context: ${context}` : '';
        return {
            systemInstructionText: `You are an AI security assistant (experimental). Identify potential common security vulnerabilities (e.g., OWASP Top 10 related) in the ${language} code, considering context.${contextStr} Explain findings in Markdown. Disclaimer: This is not a substitute for security audits.`,
            userQueryText: `Code:\n\`\`\`${language}\n${code}\n\`\`\``,
            useWebSearch: false,
            enableFunctionCalling: true // Allow reading context files
        };
    }
};
