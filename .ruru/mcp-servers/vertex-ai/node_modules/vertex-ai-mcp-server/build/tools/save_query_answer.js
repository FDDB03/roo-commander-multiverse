import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
import { modelIdPlaceholder } from "./tool_definition.js";
import { z } from "zod";
import { zodToJsonSchema } from "zod-to-json-schema";
// Schema combining query args + output_path + websearch flag
export const SaveQueryAnswerArgsSchema = z.object({
    query: z.string().describe("The natural language question to answer."),
    use_websearch: z.boolean().optional().default(true).describe("Whether to use Google Search results to enhance the answer. Defaults to true."),
    output_path: z.string().describe("The relative path where the generated answer should be saved (e.g., 'answers/research-notes.txt').")
});
// Convert Zod schema to JSON schema
const SaveQueryAnswerJsonSchema = zodToJsonSchema(SaveQueryAnswerArgsSchema);
export const saveQueryAnswerTool = {
    name: "save_query_answer",
    description: `Answers a natural language query, optionally using Google Search results, and saves the answer to a file. Uses the configured Vertex AI model (${modelIdPlaceholder}). Requires 'query' and 'output_path'.`,
    inputSchema: SaveQueryAnswerJsonSchema,
    // Build prompt logic adapted from answer_query_websearch/direct
    buildPrompt: (args, modelId) => {
        const parsed = SaveQueryAnswerArgsSchema.safeParse(args);
        if (!parsed.success) {
            throw new McpError(ErrorCode.InvalidParams, `Invalid arguments for save_query_answer: ${parsed.error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ')}`);
        }
        const { query, use_websearch } = parsed.data; // output_path used in handler
        // System instruction can be minimal or tailored if needed
        const systemInstructionText = use_websearch
            ? `You are a helpful AI assistant. Answer the user's query based on your knowledge and relevant, up-to-date information found via web search.`
            : `You are a helpful AI assistant. Answer the user's query based on your internal knowledge. Do not perform web searches.`;
        const userQueryText = query;
        return {
            systemInstructionText: systemInstructionText,
            userQueryText: userQueryText,
            useWebSearch: use_websearch, // Control web search based on flag
            enableFunctionCalling: false // Function calling not typically needed for direct answers
        };
    }
};
