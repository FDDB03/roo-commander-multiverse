/**
 * Determines if a given URL points to a Git repository or a general website.
 * Checks for common Git URL patterns (.git extension, known hosting domains).
 *
 * @param url The URL string to check.
 * @returns 'git' if it appears to be a Git repository URL, 'web' otherwise.
 */
export function determineSourceType(url) {
    try {
        const parsedUrl = new URL(url);
        // Check for .git extension in the pathname
        if (parsedUrl.pathname.endsWith('.git')) {
            return 'git';
        }
        // Check for known Git hosting domain names
        const gitHosts = ['github.com', 'gitlab.com', 'bitbucket.org', 'dev.azure.com', 'codecommit.']; // Added Azure DevOps and AWS CodeCommit
        if (gitHosts.some(host => parsedUrl.hostname.includes(host))) {
            // More specific check for Azure DevOps (_git path)
            if (parsedUrl.hostname.includes('dev.azure.com') && parsedUrl.pathname.includes('/_git/')) {
                return 'git';
            }
            // If not Azure DevOps or CodeCommit, assume it's a git host if matched
            if (!parsedUrl.hostname.includes('dev.azure.com') && !parsedUrl.hostname.includes('codecommit.')) {
                return 'git';
            }
            // For CodeCommit, the format is git-codecommit.<region>.amazonaws.com/v1/repos/<repo>
            if (parsedUrl.hostname.startsWith('git-codecommit.') && parsedUrl.hostname.includes('.amazonaws.com')) {
                return 'git';
            }
        }
    }
    catch (e) {
        // If URL parsing fails, treat it as a generic web URL for further processing attempt
        console.error(`[${new Date().toISOString()}] Failed to parse URL, assuming 'web': ${url}`, e);
        return 'web';
    }
    // Default to 'web' if no specific Git patterns match
    return 'web';
}
